



//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
// 
//     Tool     : bondc, Version=3.0.1, Build=bond-git.debug.not
//     Template : Microsoft.Bond.Rules.dll#Rules_Bond_CSharp.tt
//     File     : Geometry_types.cs
//
//     Changes to this file may cause incorrect behavior and will be lost when
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using global::Microsoft.Bond;
using global::System;
using global::System.Collections;
using global::System.Collections.Generic;
using global::System.Text;

namespace Geometry
{
/// <Summary>
/// Point
/// </Summary>
[System.CodeDom.Compiler.GeneratedCode("bondc.exe", null)]
public partial class Point : IBondSerializable, IGenericSerializer
{
    //
    // Fields
    //

    // 10: Optional double X
    private Double m_X;

    // 20: Optional double Y
    private Double m_Y;

    // 30: Optional double Z
    private Double m_Z;

    /// <Summary>
    /// X
    /// </Summary>
    public Double X
    {
        get { return this.m_X; }
        set { this.m_X = value; }
    }

    /// <Summary>
    /// Y
    /// </Summary>
    public Double Y
    {
        get { return this.m_Y; }
        set { this.m_Y = value; }
    }

    /// <Summary>
    /// Z
    /// </Summary>
    public Double Z
    {
        get { return this.m_Z; }
        set { this.m_Z = value; }
    }

	public static string GetFullyQualifiedName()
    {
        return __internal.sc_structQualifiedName;
    }

    /// <summary>
    /// Meta schema.
    /// </summary>
    private static class Schema
    {
		public static readonly Metadata meta = new Metadata();
        public static readonly Metadata X_meta = new Metadata();
        public static readonly Metadata Y_meta = new Metadata();
        public static readonly Metadata Z_meta = new Metadata();

        static Schema()
        {
			StringBuilder runtimeName = new StringBuilder();
			runtimeName.Append("Point");
 
            meta.name = runtimeName.ToString();
            meta.qualified_name = "Geometry." + meta.name;


            // X
			X_meta.name = "X";
            X_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            X_meta.default_value.double_value = 0;

            // Y
			Y_meta.name = "Y";
            Y_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            Y_meta.default_value.double_value = 0;

            // Z
			Z_meta.name = "Z";
            Z_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            Z_meta.default_value.double_value = 0;
        }   // ~static Schema()

    }   // ~Schema


    private static class __ordinals
    {
        public const int X = 10;
        public const int Y = 20;
        public const int Z = 30;
    }   // ~__ordinals


    private static class __internal
    {

        public static readonly String sc_structName = Schema.meta.name;
        public static readonly String sc_structQualifiedName = Schema.meta.qualified_name;

        public const String s_X = "X";
        public const String s_Y = "Y";
        public const String s_Z = "Z";
    }   // ~__internal

    // Constructor
    public Point()
    {
        Reset();
    }

    /// <Summary>
    /// Reset instance and re-initialize the members.
    /// </Summary>
    public virtual void Reset()
    {
        Reset(__internal.sc_structName, __internal.sc_structQualifiedName);
    }

    protected  void Reset(string name, string qualifiedName)
    {
        
        ResetImpl(name, qualifiedName);
    }

    private void ResetImpl(string name, string qualifiedName)
    {
        m_X = 0;
        m_Y = 0;
        m_Z = 0;
    } // ResetImpl()

    public virtual IBondSerializable Clone()
    {
        global::Geometry.Point cloned = new global::Geometry.Point();
        CopyTo(cloned);
        return cloned;
    }

    public void CopyTo(global::Geometry.Point that)
    {
        if (that == null)
        {
            throw new  ArgumentNullException("that");
        }
        
        // 10: double X
        that.X = this.X;
        // 20: double Y
        that.Y = this.Y;
        // 30: double Z
        that.Z = this.Z;
    }    // ~CopyTo


    public virtual void Unmarshal(System.IO.Stream input)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, this);
    }

    public virtual void Unmarshal(System.IO.Stream input, IBondSerializable schema)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, schema as SchemaDef, this);
    }

    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader)
    {
        if (!reader.HasCapability(global::Microsoft.Bond.Protocol.Tagged))
        {
            ReadUntagged(reader);
        }
        else
        {
            bool isPartialStruct;

            Read(reader, out isPartialStruct);
            
            if (isPartialStruct)
            {
                global::Microsoft.Bond.ReadHelper.SkipPartialStruct(reader);
            }
        }
    }

    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader, IBondSerializable schema)
    {
        Read(ProtocolHelper.CreateReader(reader, schema));
    }

    protected  void ReadUntagged(global::Microsoft.Bond.IProtocolReader reader)
    {
        bool canOmitFields = reader.HasCapability(global::Microsoft.Bond.Protocol.CanOmitFields);
        Reset();
        

        reader.ReadStructBegin();

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.X = reader.ReadDouble();
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.Y = reader.ReadDouble();
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.Z = reader.ReadDouble();
        }
        reader.ReadStructEnd();
    }   // ~ReadUntagged()


    protected  void Read(global::Microsoft.Bond.IProtocolReader reader, out bool isPartialStruct)
    {
        Reset();

        reader.ReadStructBegin(true);
        
        while (true)
        {
            BondDataType type = BondDataType.BT_STOP;
            UInt16 id = UInt16.MaxValue;

            reader.ReadFieldBegin(out type, out id);

            if (type == BondDataType.BT_STOP || type == BondDataType.BT_STOP_BASE)
            {
                isPartialStruct = (type == BondDataType.BT_STOP_BASE);
                break;
            }

            switch (id)
            {
                case __ordinals.X:  // id=10
                    this.X = global::Microsoft.Bond.ReadHelper.ReadDouble(reader, type);
                    break;
                case __ordinals.Y:  // id=20
                    this.Y = global::Microsoft.Bond.ReadHelper.ReadDouble(reader, type);
                    break;
                case __ordinals.Z:  // id=30
                    this.Z = global::Microsoft.Bond.ReadHelper.ReadDouble(reader, type);
                    break;
                default:
                    reader.Skip(type);
                    break;
            } // ~switch

            reader.ReadFieldEnd();

        } // ~while

        reader.ReadStructEnd();

    }   // ~Read()


    virtual public void Marshal(IProtocolWriter writer)
    {
        global::Microsoft.Bond.Marshaler.Marshal(this, writer);
    }

    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer)
    {
        Write(writer, true);
    }

    public void Write(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
        global::Microsoft.Bond.IProtocolWriter pass0; 
        
        if (isTopLevel && (pass0 = writer.GetPass0Writer()) != null)
        {
            WriteInternal(pass0, isTopLevel);
            WriteInternal(writer, isTopLevel);
            writer.EndDoublePass();
        }
        else
        {
            WriteInternal(writer, isTopLevel);
        }
    }   // ~Write()

    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer, Type type)
    {
        if (type == typeof(Point))
        {
            Write(writer, true);
        }
    }

    protected void WriteInternal(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
	                

        bool writeAllFields = !writer.MayOmitFields;

        writer.WriteStructBegin(Schema.meta, !isTopLevel, true);

        if (writeAllFields || (!Schema.X_meta.default_value.Equals(m_X)))
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_DOUBLE, __ordinals.X, Schema.X_meta);
                writer.WriteDouble(m_X);
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_DOUBLE, __ordinals.X, Schema.X_meta);
        }

        if (writeAllFields || (!Schema.Y_meta.default_value.Equals(m_Y)))
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_DOUBLE, __ordinals.Y, Schema.Y_meta);
                writer.WriteDouble(m_Y);
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_DOUBLE, __ordinals.Y, Schema.Y_meta);
        }

        if (writeAllFields || (!Schema.Z_meta.default_value.Equals(m_Z)))
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_DOUBLE, __ordinals.Z, Schema.Z_meta);
                writer.WriteDouble(m_Z);
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_DOUBLE, __ordinals.Z, Schema.Z_meta);
        }

        writer.WriteStructEnd(!isTopLevel);
    }   // ~Write()

    private static volatile global::Microsoft.Bond.SchemaDef __schema;

    public virtual IBondSerializable GetSchema()
    {
        return GetRuntimeSchema();
    }

    static public global::Microsoft.Bond.SchemaDef GetRuntimeSchema()
    {
        if (__schema == null)
        {
            var schema = new global::Microsoft.Bond.SchemaDef();
            schema.root = GetTypeDef(schema);
            __schema = schema;
        }
        return __schema;
    }

    static public global::Microsoft.Bond.TypeDef GetTypeDef(global::Microsoft.Bond.SchemaDef schema)
    {
        global::Microsoft.Bond.TypeDef type = new global::Microsoft.Bond.TypeDef();
        type.id = global::Microsoft.Bond.BondDataType.BT_STRUCT;
        type.struct_def = GetStructDef(schema);
        return type;
    }

    static protected UInt16 GetStructDef(global::Microsoft.Bond.SchemaDef schema)
    {
        UInt16 pos;

        for(pos = 0; pos < schema.structs.Count; pos++)
        {
            if (schema.structs[pos].metadata.qualified_name == __internal.sc_structQualifiedName)
            {
                return pos;
            }
        }
        // pos == schema.structs.Count

        global::Microsoft.Bond.StructDef structDef = new global::Microsoft.Bond.StructDef();
        structDef.metadata.name = __internal.sc_structName;
        structDef.metadata.qualified_name = __internal.sc_structQualifiedName;
        schema.structs.Add(structDef);

        global::Microsoft.Bond.FieldDef field;


        field = new global::Microsoft.Bond.FieldDef();
        field.id = 10;
        field.metadata.name="X";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.metadata.default_value.double_value = 0;
        field.type.id = global::Microsoft.Bond.BondDataType.BT_DOUBLE;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 20;
        field.metadata.name="Y";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.metadata.default_value.double_value = 0;
        field.type.id = global::Microsoft.Bond.BondDataType.BT_DOUBLE;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 30;
        field.metadata.name="Z";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.metadata.default_value.double_value = 0;
        field.type.id = global::Microsoft.Bond.BondDataType.BT_DOUBLE;

        structDef.fields.Add(field);

        return pos;
    }
 
    public virtual bool MemberwiseCompare(object obj)
    {
        if (obj == null)
        {
            return false;
        }
        
        Point that = obj as Point;
        if (that == null)
        {
            return false;
        }
        
        return this.MemberwiseCompare(that);
    }
    
    public bool MemberwiseCompare(Point other)
    {
        if (!MemberwiseCompareQuick(other))
        {
            return false;
        }
        
        return MemberwiseCompareDeep(other);
    }
    

    protected bool MemberwiseCompareQuick(Point that)
    {
        bool equals = true;
        
        equals = equals && ((Double.IsNaN(this.X) ? Double.IsNaN(that.X) : (this.X == that.X)));
        equals = equals && ((Double.IsNaN(this.Y) ? Double.IsNaN(that.Y) : (this.Y == that.Y)));
        equals = equals && ((Double.IsNaN(this.Z) ? Double.IsNaN(that.Z) : (this.Z == that.Z)));
        return equals;
    }    // ~MemberwiseCompareQuick
    
    protected bool MemberwiseCompareDeep(Point that)
    {
        bool equals = true;
        
        return equals;
    }    // ~MemberwiseCompareDeep
    
    public override string ToString()
    {
        return ToString(false, '\n');
    }

    public  string ToString(bool valuesOnly, char separator)
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
   
        if (!valuesOnly)
        {
            sb.AppendFormat("{0}{1}{2}{1}", base.ToString(), separator, __internal.sc_structName);
        }
        
        string format = valuesOnly ? "{1}{2}" : "{0} = {1}{2}";
        sb.AppendFormat(format, __internal.s_X, this.X, separator);
        sb.AppendFormat(format, __internal.s_Y, this.Y, separator);
        sb.AppendFormat(format, __internal.s_Z, this.Z, separator);
        
        return sb.ToString();
    } // ToString()

}; // class Point
/// <Summary>
/// Shape
/// </Summary>
[System.CodeDom.Compiler.GeneratedCode("bondc.exe", null)]
public partial class Shape : IBondSerializable, IGenericSerializer
{
    //
    // Fields
    //

    // 0: Optional int32 x
    private Int32 m_x;

    // 1: Optional int32 y
    private Int32 m_y;

    /// <Summary>
    /// x
    /// </Summary>
    public Int32 x
    {
        get { return this.m_x; }
        set { this.m_x = value; }
    }

    /// <Summary>
    /// y
    /// </Summary>
    public Int32 y
    {
        get { return this.m_y; }
        set { this.m_y = value; }
    }

	public static string GetFullyQualifiedName()
    {
        return __internal.sc_structQualifiedName;
    }

    /// <summary>
    /// Meta schema.
    /// </summary>
    private static class Schema
    {
		public static readonly Metadata meta = new Metadata();
        public static readonly Metadata x_meta = new Metadata();
        public static readonly Metadata y_meta = new Metadata();

        static Schema()
        {
			StringBuilder runtimeName = new StringBuilder();
			runtimeName.Append("Shape");
 
            meta.name = runtimeName.ToString();
            meta.qualified_name = "Geometry." + meta.name;


            // x
			x_meta.name = "x";
            x_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            x_meta.default_value.int_value = 0;

            // y
			y_meta.name = "y";
            y_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            y_meta.default_value.int_value = 0;
        }   // ~static Schema()

    }   // ~Schema


    private static class __ordinals
    {
        public const int x = 0;
        public const int y = 1;
    }   // ~__ordinals


    private static class __internal
    {

        public static readonly String sc_structName = Schema.meta.name;
        public static readonly String sc_structQualifiedName = Schema.meta.qualified_name;

        public const String s_x = "x";
        public const String s_y = "y";
    }   // ~__internal

    // Constructor
    public Shape()
    {
        Reset();
    }

    /// <Summary>
    /// Reset instance and re-initialize the members.
    /// </Summary>
    public virtual void Reset()
    {
        Reset(__internal.sc_structName, __internal.sc_structQualifiedName);
    }

    protected  void Reset(string name, string qualifiedName)
    {
        
        ResetImpl(name, qualifiedName);
    }

    private void ResetImpl(string name, string qualifiedName)
    {
        m_x = 0;
        m_y = 0;
    } // ResetImpl()

    public virtual IBondSerializable Clone()
    {
        global::Geometry.Shape cloned = new global::Geometry.Shape();
        CopyTo(cloned);
        return cloned;
    }

    public void CopyTo(global::Geometry.Shape that)
    {
        if (that == null)
        {
            throw new  ArgumentNullException("that");
        }
        
        // 0: int32 x
        that.x = this.x;
        // 1: int32 y
        that.y = this.y;
    }    // ~CopyTo


    public virtual void Unmarshal(System.IO.Stream input)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, this);
    }

    public virtual void Unmarshal(System.IO.Stream input, IBondSerializable schema)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, schema as SchemaDef, this);
    }

    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader)
    {
        if (!reader.HasCapability(global::Microsoft.Bond.Protocol.Tagged))
        {
            ReadUntagged(reader);
        }
        else
        {
            bool isPartialStruct;

            Read(reader, out isPartialStruct);
            
            if (isPartialStruct)
            {
                global::Microsoft.Bond.ReadHelper.SkipPartialStruct(reader);
            }
        }
    }

    public virtual void Read(global::Microsoft.Bond.IProtocolReader reader, IBondSerializable schema)
    {
        Read(ProtocolHelper.CreateReader(reader, schema));
    }

    protected  void ReadUntagged(global::Microsoft.Bond.IProtocolReader reader)
    {
        bool canOmitFields = reader.HasCapability(global::Microsoft.Bond.Protocol.CanOmitFields);
        Reset();
        

        reader.ReadStructBegin();

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.x = reader.ReadInt32();
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.y = reader.ReadInt32();
        }
        reader.ReadStructEnd();
    }   // ~ReadUntagged()


    protected  void Read(global::Microsoft.Bond.IProtocolReader reader, out bool isPartialStruct)
    {
        Reset();

        reader.ReadStructBegin(true);
        
        while (true)
        {
            BondDataType type = BondDataType.BT_STOP;
            UInt16 id = UInt16.MaxValue;

            reader.ReadFieldBegin(out type, out id);

            if (type == BondDataType.BT_STOP || type == BondDataType.BT_STOP_BASE)
            {
                isPartialStruct = (type == BondDataType.BT_STOP_BASE);
                break;
            }

            switch (id)
            {
                case __ordinals.x:  // id=0
                    this.x = global::Microsoft.Bond.ReadHelper.ReadInt32(reader, type);
                    break;
                case __ordinals.y:  // id=1
                    this.y = global::Microsoft.Bond.ReadHelper.ReadInt32(reader, type);
                    break;
                default:
                    reader.Skip(type);
                    break;
            } // ~switch

            reader.ReadFieldEnd();

        } // ~while

        reader.ReadStructEnd();

    }   // ~Read()


    virtual public void Marshal(IProtocolWriter writer)
    {
        global::Microsoft.Bond.Marshaler.Marshal(this, writer);
    }

    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer)
    {
        Write(writer, true);
    }

    public void Write(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
        global::Microsoft.Bond.IProtocolWriter pass0; 
        
        if (isTopLevel && (pass0 = writer.GetPass0Writer()) != null)
        {
            WriteInternal(pass0, isTopLevel);
            WriteInternal(writer, isTopLevel);
            writer.EndDoublePass();
        }
        else
        {
            WriteInternal(writer, isTopLevel);
        }
    }   // ~Write()

    virtual public void Write(global::Microsoft.Bond.IProtocolWriter writer, Type type)
    {
        if (type == typeof(Shape))
        {
            Write(writer, true);
        }
    }

    protected void WriteInternal(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
	                

        bool writeAllFields = !writer.MayOmitFields;

        writer.WriteStructBegin(Schema.meta, !isTopLevel, true);

        if (writeAllFields || (!Schema.x_meta.default_value.Equals(m_x)))
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_INT32, __ordinals.x, Schema.x_meta);
                writer.WriteInt32(m_x);
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_INT32, __ordinals.x, Schema.x_meta);
        }

        if (writeAllFields || (!Schema.y_meta.default_value.Equals(m_y)))
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_INT32, __ordinals.y, Schema.y_meta);
                writer.WriteInt32(m_y);
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_INT32, __ordinals.y, Schema.y_meta);
        }

        writer.WriteStructEnd(!isTopLevel);
    }   // ~Write()

    private static volatile global::Microsoft.Bond.SchemaDef __schema;

    public virtual IBondSerializable GetSchema()
    {
        return GetRuntimeSchema();
    }

    static public global::Microsoft.Bond.SchemaDef GetRuntimeSchema()
    {
        if (__schema == null)
        {
            var schema = new global::Microsoft.Bond.SchemaDef();
            schema.root = GetTypeDef(schema);
            __schema = schema;
        }
        return __schema;
    }

    static public global::Microsoft.Bond.TypeDef GetTypeDef(global::Microsoft.Bond.SchemaDef schema)
    {
        global::Microsoft.Bond.TypeDef type = new global::Microsoft.Bond.TypeDef();
        type.id = global::Microsoft.Bond.BondDataType.BT_STRUCT;
        type.struct_def = GetStructDef(schema);
        return type;
    }

    static protected UInt16 GetStructDef(global::Microsoft.Bond.SchemaDef schema)
    {
        UInt16 pos;

        for(pos = 0; pos < schema.structs.Count; pos++)
        {
            if (schema.structs[pos].metadata.qualified_name == __internal.sc_structQualifiedName)
            {
                return pos;
            }
        }
        // pos == schema.structs.Count

        global::Microsoft.Bond.StructDef structDef = new global::Microsoft.Bond.StructDef();
        structDef.metadata.name = __internal.sc_structName;
        structDef.metadata.qualified_name = __internal.sc_structQualifiedName;
        schema.structs.Add(structDef);

        global::Microsoft.Bond.FieldDef field;


        field = new global::Microsoft.Bond.FieldDef();
        field.id = 0;
        field.metadata.name="x";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.metadata.default_value.int_value = 0;
        field.type.id = global::Microsoft.Bond.BondDataType.BT_INT32;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 1;
        field.metadata.name="y";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.metadata.default_value.int_value = 0;
        field.type.id = global::Microsoft.Bond.BondDataType.BT_INT32;

        structDef.fields.Add(field);

        return pos;
    }
 
    public virtual bool MemberwiseCompare(object obj)
    {
        if (obj == null)
        {
            return false;
        }
        
        Shape that = obj as Shape;
        if (that == null)
        {
            return false;
        }
        
        return this.MemberwiseCompare(that);
    }
    
    public bool MemberwiseCompare(Shape other)
    {
        if (!MemberwiseCompareQuick(other))
        {
            return false;
        }
        
        return MemberwiseCompareDeep(other);
    }
    

    protected bool MemberwiseCompareQuick(Shape that)
    {
        bool equals = true;
        
        equals = equals && ((this.x == that.x));
        equals = equals && ((this.y == that.y));
        return equals;
    }    // ~MemberwiseCompareQuick
    
    protected bool MemberwiseCompareDeep(Shape that)
    {
        bool equals = true;
        
        return equals;
    }    // ~MemberwiseCompareDeep
    
    public override string ToString()
    {
        return ToString(false, '\n');
    }

    public  string ToString(bool valuesOnly, char separator)
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
   
        if (!valuesOnly)
        {
            sb.AppendFormat("{0}{1}{2}{1}", base.ToString(), separator, __internal.sc_structName);
        }
        
        string format = valuesOnly ? "{1}{2}" : "{0} = {1}{2}";
        sb.AppendFormat(format, __internal.s_x, this.x, separator);
        sb.AppendFormat(format, __internal.s_y, this.y, separator);
        
        return sb.ToString();
    } // ToString()

}; // class Shape
/// <Summary>
/// Rectangle
/// </Summary>
[System.CodeDom.Compiler.GeneratedCode("bondc.exe", null)]
public partial class Rectangle : global::Geometry.Shape
{
    //
    // Fields
    //

    // 0: Optional int32 width
    private Int32 m_width;

    // 1: Optional int32 height
    private Int32 m_height;

    /// <Summary>
    /// width
    /// </Summary>
    public Int32 width
    {
        get { return this.m_width; }
        set { this.m_width = value; }
    }

    /// <Summary>
    /// height
    /// </Summary>
    public Int32 height
    {
        get { return this.m_height; }
        set { this.m_height = value; }
    }

	new public static string GetFullyQualifiedName()
    {
        return __internal.sc_structQualifiedName;
    }

    /// <summary>
    /// Meta schema.
    /// </summary>
    private static class Schema
    {
		public static readonly Metadata meta = new Metadata();
        public static readonly Metadata width_meta = new Metadata();
        public static readonly Metadata height_meta = new Metadata();

        static Schema()
        {
			StringBuilder runtimeName = new StringBuilder();
			runtimeName.Append("Rectangle");
 
            meta.name = runtimeName.ToString();
            meta.qualified_name = "Geometry." + meta.name;


            // width
			width_meta.name = "width";
            width_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            width_meta.default_value.int_value = 0;

            // height
			height_meta.name = "height";
            height_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            height_meta.default_value.int_value = 0;
        }   // ~static Schema()

    }   // ~Schema


    private static class __ordinals
    {
        public const int width = 0;
        public const int height = 1;
    }   // ~__ordinals


    private static class __internal
    {

        public static readonly String sc_structName = Schema.meta.name;
        public static readonly String sc_structQualifiedName = Schema.meta.qualified_name;

        public const String s_width = "width";
        public const String s_height = "height";
    }   // ~__internal

    // Constructor
    public Rectangle()
    {
        
    }

    /// <Summary>
    /// Reset instance and re-initialize the members.
    /// </Summary>
    public override void Reset()
    {
        Reset(__internal.sc_structName, __internal.sc_structQualifiedName);
    }

    protected new void Reset(string name, string qualifiedName)
    {
        base.Reset(name, qualifiedName);
        ResetImpl(name, qualifiedName);
    }

    private void ResetImpl(string name, string qualifiedName)
    {
        m_width = 0;
        m_height = 0;
    } // ResetImpl()

    public override IBondSerializable Clone()
    {
        global::Geometry.Rectangle cloned = new global::Geometry.Rectangle();
        CopyTo(cloned);
        return cloned;
    }

    public void CopyTo(global::Geometry.Rectangle that)
    {
        if (that == null)
        {
            throw new  ArgumentNullException("that");
        }
        base.CopyTo(that);
        // 0: int32 width
        that.width = this.width;
        // 1: int32 height
        that.height = this.height;
    }    // ~CopyTo


    public override void Unmarshal(System.IO.Stream input)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, this);
    }

    public override void Unmarshal(System.IO.Stream input, IBondSerializable schema)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, schema as SchemaDef, this);
    }

    public override void Read(global::Microsoft.Bond.IProtocolReader reader)
    {
        if (!reader.HasCapability(global::Microsoft.Bond.Protocol.Tagged))
        {
            ReadUntagged(reader);
        }
        else
        {
            bool isPartialStruct;

            Read(reader, out isPartialStruct);
            
            if (isPartialStruct)
            {
                global::Microsoft.Bond.ReadHelper.SkipPartialStruct(reader);
            }
        }
    }

    public override void Read(global::Microsoft.Bond.IProtocolReader reader, IBondSerializable schema)
    {
        Read(ProtocolHelper.CreateReader(reader, schema));
    }

    protected new  void ReadUntagged(global::Microsoft.Bond.IProtocolReader reader)
    {
        bool canOmitFields = reader.HasCapability(global::Microsoft.Bond.Protocol.CanOmitFields);
        
        base.ReadUntagged(reader);

        reader.ReadStructBegin();

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.width = reader.ReadInt32();
        }

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.height = reader.ReadInt32();
        }
        reader.ReadStructEnd();
    }   // ~ReadUntagged()


    protected new  void Read(global::Microsoft.Bond.IProtocolReader reader, out bool isPartialStruct)
    {
        
        base.Read(reader, out isPartialStruct);

        if (!isPartialStruct)
        {
            return;
        }        

        reader.ReadStructBegin(false);
        
        while (true)
        {
            BondDataType type = BondDataType.BT_STOP;
            UInt16 id = UInt16.MaxValue;

            reader.ReadFieldBegin(out type, out id);

            if (type == BondDataType.BT_STOP || type == BondDataType.BT_STOP_BASE)
            {
                isPartialStruct = (type == BondDataType.BT_STOP_BASE);
                break;
            }

            switch (id)
            {
                case __ordinals.width:  // id=0
                    this.width = global::Microsoft.Bond.ReadHelper.ReadInt32(reader, type);
                    break;
                case __ordinals.height:  // id=1
                    this.height = global::Microsoft.Bond.ReadHelper.ReadInt32(reader, type);
                    break;
                default:
                    reader.Skip(type);
                    break;
            } // ~switch

            reader.ReadFieldEnd();

        } // ~while

        reader.ReadStructEnd();

    }   // ~Read()


    override public void Marshal(IProtocolWriter writer)
    {
        global::Microsoft.Bond.Marshaler.Marshal(this, writer);
    }

    override public void Write(global::Microsoft.Bond.IProtocolWriter writer)
    {
        Write(writer, true);
    }

    new public void Write(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
        global::Microsoft.Bond.IProtocolWriter pass0; 
        
        if (isTopLevel && (pass0 = writer.GetPass0Writer()) != null)
        {
            WriteInternal(pass0, isTopLevel);
            WriteInternal(writer, isTopLevel);
            writer.EndDoublePass();
        }
        else
        {
            WriteInternal(writer, isTopLevel);
        }
    }   // ~Write()

    override public void Write(global::Microsoft.Bond.IProtocolWriter writer, Type type)
    {
        if (type == typeof(Rectangle))
        {
            Write(writer, true);
        }
        else
        {
            base.Write(writer, type);
        }
    }

    new protected void WriteInternal(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
	    base.WriteInternal(writer, false);            

        bool writeAllFields = !writer.MayOmitFields;

        writer.WriteStructBegin(Schema.meta, !isTopLevel, false);

        if (writeAllFields || (!Schema.width_meta.default_value.Equals(m_width)))
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_INT32, __ordinals.width, Schema.width_meta);
                writer.WriteInt32(m_width);
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_INT32, __ordinals.width, Schema.width_meta);
        }

        if (writeAllFields || (!Schema.height_meta.default_value.Equals(m_height)))
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_INT32, __ordinals.height, Schema.height_meta);
                writer.WriteInt32(m_height);
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_INT32, __ordinals.height, Schema.height_meta);
        }

        writer.WriteStructEnd(!isTopLevel);
    }   // ~Write()

    private static volatile global::Microsoft.Bond.SchemaDef __schema;

    public override IBondSerializable GetSchema()
    {
        return GetRuntimeSchema();
    }

    static new public global::Microsoft.Bond.SchemaDef GetRuntimeSchema()
    {
        if (__schema == null)
        {
            var schema = new global::Microsoft.Bond.SchemaDef();
            schema.root = GetTypeDef(schema);
            __schema = schema;
        }
        return __schema;
    }

    static new public global::Microsoft.Bond.TypeDef GetTypeDef(global::Microsoft.Bond.SchemaDef schema)
    {
        global::Microsoft.Bond.TypeDef type = new global::Microsoft.Bond.TypeDef();
        type.id = global::Microsoft.Bond.BondDataType.BT_STRUCT;
        type.struct_def = GetStructDef(schema);
        return type;
    }

    static new protected UInt16 GetStructDef(global::Microsoft.Bond.SchemaDef schema)
    {
        UInt16 pos;

        for(pos = 0; pos < schema.structs.Count; pos++)
        {
            if (schema.structs[pos].metadata.qualified_name == __internal.sc_structQualifiedName)
            {
                return pos;
            }
        }
        // pos == schema.structs.Count

        global::Microsoft.Bond.StructDef structDef = new global::Microsoft.Bond.StructDef();
        structDef.metadata.name = __internal.sc_structName;
        structDef.metadata.qualified_name = __internal.sc_structQualifiedName;
        schema.structs.Add(structDef);

        structDef.base_def = global::Geometry.Shape.GetTypeDef(schema);
        

        global::Microsoft.Bond.FieldDef field;


        field = new global::Microsoft.Bond.FieldDef();
        field.id = 0;
        field.metadata.name="width";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.metadata.default_value.int_value = 0;
        field.type.id = global::Microsoft.Bond.BondDataType.BT_INT32;

        structDef.fields.Add(field);

        field = new global::Microsoft.Bond.FieldDef();
        field.id = 1;
        field.metadata.name="height";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.metadata.default_value.int_value = 0;
        field.type.id = global::Microsoft.Bond.BondDataType.BT_INT32;

        structDef.fields.Add(field);

        return pos;
    }
 
    public override bool MemberwiseCompare(object obj)
    {
        if (obj == null)
        {
            return false;
        }
        
        Rectangle that = obj as Rectangle;
        if (that == null)
        {
            return false;
        }
        
        return this.MemberwiseCompare(that);
    }
    
    public bool MemberwiseCompare(Rectangle other)
    {
        if (!MemberwiseCompareQuick(other))
        {
            return false;
        }
        
        return MemberwiseCompareDeep(other);
    }
    

    protected bool MemberwiseCompareQuick(Rectangle that)
    {
        bool equals = true;
        equals = equals && base.MemberwiseCompareQuick(that);
        equals = equals && ((this.width == that.width));
        equals = equals && ((this.height == that.height));
        return equals;
    }    // ~MemberwiseCompareQuick
    
    protected bool MemberwiseCompareDeep(Rectangle that)
    {
        bool equals = true;
        equals = equals && base.MemberwiseCompareDeep(that);
        return equals;
    }    // ~MemberwiseCompareDeep
    
    public override string ToString()
    {
        return ToString(false, '\n');
    }

    public new string ToString(bool valuesOnly, char separator)
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
   
        if (!valuesOnly)
        {
            sb.AppendFormat("{0}{1}{2}{1}", base.ToString(), separator, __internal.sc_structName);
        }
        
        string format = valuesOnly ? "{1}{2}" : "{0} = {1}{2}";
        sb.AppendFormat(format, __internal.s_width, this.width, separator);
        sb.AppendFormat(format, __internal.s_height, this.height, separator);
        
        return sb.ToString();
    } // ToString()

}; // class Rectangle
/// <Summary>
/// Circle
/// </Summary>
[System.CodeDom.Compiler.GeneratedCode("bondc.exe", null)]
public partial class Circle : global::Geometry.Shape
{
    //
    // Fields
    //

    // 0: Optional int32 radius
    private Int32 m_radius;

    /// <Summary>
    /// radius
    /// </Summary>
    public Int32 radius
    {
        get { return this.m_radius; }
        set { this.m_radius = value; }
    }

	new public static string GetFullyQualifiedName()
    {
        return __internal.sc_structQualifiedName;
    }

    /// <summary>
    /// Meta schema.
    /// </summary>
    private static class Schema
    {
		public static readonly Metadata meta = new Metadata();
        public static readonly Metadata radius_meta = new Metadata();

        static Schema()
        {
			StringBuilder runtimeName = new StringBuilder();
			runtimeName.Append("Circle");
 
            meta.name = runtimeName.ToString();
            meta.qualified_name = "Geometry." + meta.name;


            // radius
			radius_meta.name = "radius";
            radius_meta.modifier = global::Microsoft.Bond.Modifier.Optional;

            radius_meta.default_value.int_value = 0;
        }   // ~static Schema()

    }   // ~Schema


    private static class __ordinals
    {
        public const int radius = 0;
    }   // ~__ordinals


    private static class __internal
    {

        public static readonly String sc_structName = Schema.meta.name;
        public static readonly String sc_structQualifiedName = Schema.meta.qualified_name;

        public const String s_radius = "radius";
    }   // ~__internal

    // Constructor
    public Circle()
    {
        
    }

    /// <Summary>
    /// Reset instance and re-initialize the members.
    /// </Summary>
    public override void Reset()
    {
        Reset(__internal.sc_structName, __internal.sc_structQualifiedName);
    }

    protected new void Reset(string name, string qualifiedName)
    {
        base.Reset(name, qualifiedName);
        ResetImpl(name, qualifiedName);
    }

    private void ResetImpl(string name, string qualifiedName)
    {
        m_radius = 0;
    } // ResetImpl()

    public override IBondSerializable Clone()
    {
        global::Geometry.Circle cloned = new global::Geometry.Circle();
        CopyTo(cloned);
        return cloned;
    }

    public void CopyTo(global::Geometry.Circle that)
    {
        if (that == null)
        {
            throw new  ArgumentNullException("that");
        }
        base.CopyTo(that);
        // 0: int32 radius
        that.radius = this.radius;
    }    // ~CopyTo


    public override void Unmarshal(System.IO.Stream input)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, this);
    }

    public override void Unmarshal(System.IO.Stream input, IBondSerializable schema)
    {
        global::Microsoft.Bond.Marshaler.Unmarshal(input, schema as SchemaDef, this);
    }

    public override void Read(global::Microsoft.Bond.IProtocolReader reader)
    {
        if (!reader.HasCapability(global::Microsoft.Bond.Protocol.Tagged))
        {
            ReadUntagged(reader);
        }
        else
        {
            bool isPartialStruct;

            Read(reader, out isPartialStruct);
            
            if (isPartialStruct)
            {
                global::Microsoft.Bond.ReadHelper.SkipPartialStruct(reader);
            }
        }
    }

    public override void Read(global::Microsoft.Bond.IProtocolReader reader, IBondSerializable schema)
    {
        Read(ProtocolHelper.CreateReader(reader, schema));
    }

    protected new  void ReadUntagged(global::Microsoft.Bond.IProtocolReader reader)
    {
        bool canOmitFields = reader.HasCapability(global::Microsoft.Bond.Protocol.CanOmitFields);
        
        base.ReadUntagged(reader);

        reader.ReadStructBegin();

        if (!canOmitFields || !reader.ReadFieldOmitted())
        {
            this.radius = reader.ReadInt32();
        }
        reader.ReadStructEnd();
    }   // ~ReadUntagged()


    protected new  void Read(global::Microsoft.Bond.IProtocolReader reader, out bool isPartialStruct)
    {
        
        base.Read(reader, out isPartialStruct);

        if (!isPartialStruct)
        {
            return;
        }        

        reader.ReadStructBegin(false);
        
        while (true)
        {
            BondDataType type = BondDataType.BT_STOP;
            UInt16 id = UInt16.MaxValue;

            reader.ReadFieldBegin(out type, out id);

            if (type == BondDataType.BT_STOP || type == BondDataType.BT_STOP_BASE)
            {
                isPartialStruct = (type == BondDataType.BT_STOP_BASE);
                break;
            }

            switch (id)
            {
                case __ordinals.radius:  // id=0
                    this.radius = global::Microsoft.Bond.ReadHelper.ReadInt32(reader, type);
                    break;
                default:
                    reader.Skip(type);
                    break;
            } // ~switch

            reader.ReadFieldEnd();

        } // ~while

        reader.ReadStructEnd();

    }   // ~Read()


    override public void Marshal(IProtocolWriter writer)
    {
        global::Microsoft.Bond.Marshaler.Marshal(this, writer);
    }

    override public void Write(global::Microsoft.Bond.IProtocolWriter writer)
    {
        Write(writer, true);
    }

    new public void Write(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
        global::Microsoft.Bond.IProtocolWriter pass0; 
        
        if (isTopLevel && (pass0 = writer.GetPass0Writer()) != null)
        {
            WriteInternal(pass0, isTopLevel);
            WriteInternal(writer, isTopLevel);
            writer.EndDoublePass();
        }
        else
        {
            WriteInternal(writer, isTopLevel);
        }
    }   // ~Write()

    override public void Write(global::Microsoft.Bond.IProtocolWriter writer, Type type)
    {
        if (type == typeof(Circle))
        {
            Write(writer, true);
        }
        else
        {
            base.Write(writer, type);
        }
    }

    new protected void WriteInternal(global::Microsoft.Bond.IProtocolWriter writer, bool isTopLevel)
    {
	    base.WriteInternal(writer, false);            

        bool writeAllFields = !writer.MayOmitFields;

        writer.WriteStructBegin(Schema.meta, !isTopLevel, false);

        if (writeAllFields || (!Schema.radius_meta.default_value.Equals(m_radius)))
        {
            writer.WriteFieldBegin(global::Microsoft.Bond.BondDataType.BT_INT32, __ordinals.radius, Schema.radius_meta);
                writer.WriteInt32(m_radius);
            writer.WriteFieldEnd();
        }
        else
        {
            writer.WriteFieldOmitted(global::Microsoft.Bond.BondDataType.BT_INT32, __ordinals.radius, Schema.radius_meta);
        }

        writer.WriteStructEnd(!isTopLevel);
    }   // ~Write()

    private static volatile global::Microsoft.Bond.SchemaDef __schema;

    public override IBondSerializable GetSchema()
    {
        return GetRuntimeSchema();
    }

    static new public global::Microsoft.Bond.SchemaDef GetRuntimeSchema()
    {
        if (__schema == null)
        {
            var schema = new global::Microsoft.Bond.SchemaDef();
            schema.root = GetTypeDef(schema);
            __schema = schema;
        }
        return __schema;
    }

    static new public global::Microsoft.Bond.TypeDef GetTypeDef(global::Microsoft.Bond.SchemaDef schema)
    {
        global::Microsoft.Bond.TypeDef type = new global::Microsoft.Bond.TypeDef();
        type.id = global::Microsoft.Bond.BondDataType.BT_STRUCT;
        type.struct_def = GetStructDef(schema);
        return type;
    }

    static new protected UInt16 GetStructDef(global::Microsoft.Bond.SchemaDef schema)
    {
        UInt16 pos;

        for(pos = 0; pos < schema.structs.Count; pos++)
        {
            if (schema.structs[pos].metadata.qualified_name == __internal.sc_structQualifiedName)
            {
                return pos;
            }
        }
        // pos == schema.structs.Count

        global::Microsoft.Bond.StructDef structDef = new global::Microsoft.Bond.StructDef();
        structDef.metadata.name = __internal.sc_structName;
        structDef.metadata.qualified_name = __internal.sc_structQualifiedName;
        schema.structs.Add(structDef);

        structDef.base_def = global::Geometry.Shape.GetTypeDef(schema);
        

        global::Microsoft.Bond.FieldDef field;


        field = new global::Microsoft.Bond.FieldDef();
        field.id = 0;
        field.metadata.name="radius";
        field.metadata.modifier = global::Microsoft.Bond.Modifier.Optional;
        field.metadata.default_value.nothing = false;

        field.metadata.default_value.int_value = 0;
        field.type.id = global::Microsoft.Bond.BondDataType.BT_INT32;

        structDef.fields.Add(field);

        return pos;
    }
 
    public override bool MemberwiseCompare(object obj)
    {
        if (obj == null)
        {
            return false;
        }
        
        Circle that = obj as Circle;
        if (that == null)
        {
            return false;
        }
        
        return this.MemberwiseCompare(that);
    }
    
    public bool MemberwiseCompare(Circle other)
    {
        if (!MemberwiseCompareQuick(other))
        {
            return false;
        }
        
        return MemberwiseCompareDeep(other);
    }
    

    protected bool MemberwiseCompareQuick(Circle that)
    {
        bool equals = true;
        equals = equals && base.MemberwiseCompareQuick(that);
        equals = equals && ((this.radius == that.radius));
        return equals;
    }    // ~MemberwiseCompareQuick
    
    protected bool MemberwiseCompareDeep(Circle that)
    {
        bool equals = true;
        equals = equals && base.MemberwiseCompareDeep(that);
        return equals;
    }    // ~MemberwiseCompareDeep
    
    public override string ToString()
    {
        return ToString(false, '\n');
    }

    public new string ToString(bool valuesOnly, char separator)
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
   
        if (!valuesOnly)
        {
            sb.AppendFormat("{0}{1}{2}{1}", base.ToString(), separator, __internal.sc_structName);
        }
        
        string format = valuesOnly ? "{1}{2}" : "{0} = {1}{2}";
        sb.AppendFormat(format, __internal.s_radius, this.radius, separator);
        
        return sb.ToString();
    } // ToString()

}; // class Circle
} // namespace Geometry
